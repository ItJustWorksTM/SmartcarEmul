name: Emul C++ CI
on: [push, pull_request]
jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: # No we will not use ICC; MSVC-Wine is feasible on Azure but only on request
          - c: gcc-9
            cxx: g++-9
          - c: clang-10
            cxx: clang++-10
          - c: clang-11
            cxx: clang++-11
        stdlib_debug: [0, 1]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install compiler
        run: if [ $(echo "$CC" | grep -oP "^clang-") ]; then sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" llvm.sh $(echo "$CC" | grep -oP "clang-\K(\d+)$"); fi
      - name: Install deps
        run: |
          sudo apt install libgl1-mesa-dev libglu1-mesa-dev ninja-build scons
      - name: configure
        run: mkdir build && pushd build && cmake -G Ninja -DSMCE_STDLIB_DEBUG=${{ matrix.stdlib_debug }} .. && popd
      - name: build
        run: |
          cmake --build build --target godot_headers
          cmake --build build --target smartcar_emul
#          cmake --build build --target smartcar_emul_tests
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: libsmartcar_emul-${{ matrix.compiler.c }}-${{ matrix.stdlib_debug }}.so
          path: godot/gdnative/artifacts/libsmartcar_emul.so

    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}


  build-windows: # This one needs to be split-off because we want to test both GCC and Clang in Ubuntu
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install deps
        run: |
          cmd /C "pip install SCons"
      - name: configure
        run: mkdir build && cd build && cmake .. && popd
      - name: build
        run: |
          cmake --build build --target godot_headers
          cmake --build build --target smartcar_emul
          dir "godot"
          dir" godot\gdnative"
          dir "godot\gdnative\artifacts"
#          cmake --build build --target smartcar_emul_tests

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: libsmartcar_emul.dll
          path: godot\gdnative\artifacts\libsmartcar_emul.dll

  build-macos: # We have to split this one off because AppleClang does not yet support Concepts at all
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - c: clang-10
            cxx: clang++-10
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew update
          brew install --force-bottle coreutils ninja scons
          if [ $(echo "$CC" | grep -Ei "^clang-") ]; then brew install z3 --force-bottle; brew upgrade --force-bottle llvm; fi
      - name: configure
        run: |
          if [ $(echo "$CC" | grep -Ei "^clang-") ]; then
            export CC=/usr/local/opt/llvm/bin/clang;
            export CXX=/usr/local/opt/llvm/bin/clang++;
          fi
          mkdir build && pushd build && cmake -G Ninja .. && popd
      - name: build
        run: |
          if [ $(echo "$CC" | grep -Ei "^clang-") ]; then
            export CC=/usr/local/opt/llvm/bin/clang;
            export CXX=/usr/local/opt/llvm/bin/clang++;
          fi
          cmake --build build --target godot_headers
          cmake --build build --target smartcar_emul
#          cmake --build build --target smartcar_emul_tests

    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}

  godot-export:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows]
    strategy:
      matrix:
        platform:
          - name: libsmartcar_emul-clang-10-0.so
            file: libsmartcar_emul.so
            preset: Linux
          - name: libsmartcar_emul.dll
            file: libsmartcar_emul.dll
            preset: Windows

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.platform.name }}
          path: godot/gdnative/artifacts/${{ matrix.platform.file }}
      - name: Debug
        run: |
          ls godot/gdnative/artifacts
      - name: Build
        id: build
        uses: josephbmanley/build-godot-action@v1.4.0
        with:
          name: example
          preset: ${{ matrix.platform.preset }}
          debugMode: "true"
          projectDir: "godot"
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Godot SMCE ${{ matrix.platform }}
          path: ${{ github.workspace }}/${{ steps.build.outputs.build }}

