name: Emul C++ CI
on: [push, pull_request]
jobs:
  setup-godot: # we might want to generate api.js on the fly instead of storing it on the repo
    runs-on: ubuntu-latest
    steps:
      - name: Cache godot
        uses: actions/cache@v2
        id: cache-godot
        with:
          path: |
            godot/godot
            ~/.local/share/godot/
#            godot/api.json # later
          key: godot-linux-323
      - name: Download godot
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          mkdir godot/cache
          cd godot/cache
          wget -c https://downloads.tuxfamily.org/godotengine/3.2.3/Godot_v3.2.3-stable_linux_headless.64.zip -O godot.zip
          wget -c https://downloads.tuxfamily.org/godotengine/3.2.3/Godot_v3.2.3-stable_export_templates.tpz -O godot_export.zip
          unzip godot.zip
          unzip godot_export.zip
          mkdir -p ~/.local/share/godot/templates
          mv templates/ ~/.local/share/godot/templates/3.2.3.stable
          mv Godot_v3.2.3-stable_linux_headless.64 ../godot
          cd ..
          rmdir cache
#          ./godot --gdnative-generate-json-api godot/gdnative/bin/api.json

  build-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: # No we will not use ICC; MSVC-Wine is feasible on Azure but only on request
          - c: gcc-9
            cxx: g++-9
          - c: clang-10
            cxx: clang++-10
          - c: clang-11
            cxx: clang++-11
        stdlib_debug: [0, 1]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install compiler
        run: if [ $(echo "$CC" | grep -oP "^clang-") ]; then sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" llvm.sh $(echo "$CC" | grep -oP "clang-\K(\d+)$"); fi
      - name: Install deps
        run: |
          sudo apt install libgl1-mesa-dev libglu1-mesa-dev ninja-build scons
      - name: configure
        run: mkdir build && pushd build && cmake -G Ninja -DSMCE_STDLIB_DEBUG=${{ matrix.stdlib_debug }} .. && popd
      - name: build
        run: |
          cmake --build build --target godot_headers
          cmake --build build --target smartcar_emul
#          cmake --build build --target smartcar_emul_tests
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: libsmartcar_emul-${{ matrix.compiler.c }}-${{ matrix.stdlib_debug }}.so
          path: godot/gdnative/lib/libsmartcar_emul.so

    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}


  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install deps
        run: |
          cmd /C "pip install SCons"
      - name: configure
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. && popd
      - name: build
        run: |
          cmake --build build --target godot_headers --config ${{ matrix.build_type }}
          cmake --build build --target smartcar_emul --config ${{ matrix.build_type }}
          dir godot\gdnative\lib
#          cmake --build build --target smartcar_emul_tests

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: smartcar_emul-${{ matrix.build_type }}.dll
          path: godot\gdnative\lib\smartcar_emul.dll

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - c: clang-10
            cxx: clang++-10
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          brew update
          brew install --force-bottle coreutils ninja scons z3 llvm
      - name: configure
        run: |
          export CC=/usr/local/opt/llvm/bin/clang;
          export CXX=/usr/local/opt/llvm/bin/clang++;
          mkdir build && pushd build && cmake -G Ninja .. && popd
      - name: build
        run: |
          export CC=/usr/local/opt/llvm/bin/clang;
          export CXX=/usr/local/opt/llvm/bin/clang++;
          cmake --build build --target godot_headers
          cmake --build build --target smartcar_emul
#          cmake --build build --target smartcar_emul_tests

  godot-export:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows, setup-godot]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Download Linux
        uses: actions/download-artifact@v2
        with:
          name: libsmartcar_emul-gcc-9-0.so
          path: godot/gdnative/lib/
      - name: Download Windows
        uses: actions/download-artifact@v2
        with:
          name: smartcar_emul-Release.dll
          path: godot/gdnative/lib/
      - name: Debug
        run: |
          ls godot/gdnative/lib
      - name: Cache godot
        uses: actions/cache@v1
        id: cache-godot
        with:
          path: godot/cache
          key: godot-linux-323
      - name: Build
        run: |
          mkdir export
          ./godot --export "Linux" export/linux_smce
          ./godot --export "Windows" export/windows_smce.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: godot_export
          path: godot/export
    env:
      LANG: en_US.UTF-8

